// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: order.sql

package db

import (
	"context"
	"database/sql"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (user_id, store_id, total_amount, delivery_address) 
VALUES ($1, $2, $3, $4) 
RETURNING order_id, user_id, store_id, total_amount, status, delivery_address, order_date
`

type CreateOrderParams struct {
	UserID          int32
	StoreID         int32
	TotalAmount     float64
	DeliveryAddress string
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, createOrder,
		arg.UserID,
		arg.StoreID,
		arg.TotalAmount,
		arg.DeliveryAddress,
	)
	var i Order
	err := row.Scan(
		&i.OrderID,
		&i.UserID,
		&i.StoreID,
		&i.TotalAmount,
		&i.Status,
		&i.DeliveryAddress,
		&i.OrderDate,
	)
	return i, err
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE FROM orders WHERE order_id = $1
`

func (q *Queries) DeleteOrder(ctx context.Context, orderID int32) error {
	_, err := q.db.ExecContext(ctx, deleteOrder, orderID)
	return err
}

const getOrderByID = `-- name: GetOrderByID :one
SELECT order_id, user_id, store_id, total_amount, status, delivery_address, order_date 
FROM orders WHERE order_id = $1
`

// Orders queries
func (q *Queries) GetOrderByID(ctx context.Context, orderID int32) (Order, error) {
	row := q.db.QueryRowContext(ctx, getOrderByID, orderID)
	var i Order
	err := row.Scan(
		&i.OrderID,
		&i.UserID,
		&i.StoreID,
		&i.TotalAmount,
		&i.Status,
		&i.DeliveryAddress,
		&i.OrderDate,
	)
	return i, err
}

const listOrdersByStore = `-- name: ListOrdersByStore :many
SELECT o.order_id, o.user_id, o.store_id, o.total_amount, o.status, o.delivery_address, o.order_date,
       u.name as user_name, u.email as user_email
FROM orders o
JOIN users u ON o.user_id = u.id
WHERE o.store_id = $1 
ORDER BY o.order_date DESC
`

type ListOrdersByStoreRow struct {
	OrderID         int32
	UserID          int32
	StoreID         int32
	TotalAmount     float64
	Status          string
	DeliveryAddress string
	OrderDate       sql.NullTime
	UserName        string
	UserEmail       string
}

func (q *Queries) ListOrdersByStore(ctx context.Context, storeID int32) ([]ListOrdersByStoreRow, error) {
	rows, err := q.db.QueryContext(ctx, listOrdersByStore, storeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListOrdersByStoreRow
	for rows.Next() {
		var i ListOrdersByStoreRow
		if err := rows.Scan(
			&i.OrderID,
			&i.UserID,
			&i.StoreID,
			&i.TotalAmount,
			&i.Status,
			&i.DeliveryAddress,
			&i.OrderDate,
			&i.UserName,
			&i.UserEmail,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOrdersByUser = `-- name: ListOrdersByUser :many
SELECT o.order_id, o.user_id, o.store_id, o.total_amount, o.status, o.delivery_address, o.order_date,
       s.name as store_name
FROM orders o
JOIN stores s ON o.store_id = s.store_id
WHERE o.user_id = $1 
ORDER BY o.order_date DESC
`

type ListOrdersByUserRow struct {
	OrderID         int32
	UserID          int32
	StoreID         int32
	TotalAmount     float64
	Status          string
	DeliveryAddress string
	OrderDate       sql.NullTime
	StoreName       string
}

func (q *Queries) ListOrdersByUser(ctx context.Context, userID int32) ([]ListOrdersByUserRow, error) {
	rows, err := q.db.QueryContext(ctx, listOrdersByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListOrdersByUserRow
	for rows.Next() {
		var i ListOrdersByUserRow
		if err := rows.Scan(
			&i.OrderID,
			&i.UserID,
			&i.StoreID,
			&i.TotalAmount,
			&i.Status,
			&i.DeliveryAddress,
			&i.OrderDate,
			&i.StoreName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderStatus = `-- name: UpdateOrderStatus :one
UPDATE orders 
SET status = $2 
WHERE order_id = $1 
RETURNING order_id, user_id, store_id, total_amount, status, delivery_address, order_date
`

type UpdateOrderStatusParams struct {
	OrderID int32
	Status  string
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, updateOrderStatus, arg.OrderID, arg.Status)
	var i Order
	err := row.Scan(
		&i.OrderID,
		&i.UserID,
		&i.StoreID,
		&i.TotalAmount,
		&i.Status,
		&i.DeliveryAddress,
		&i.OrderDate,
	)
	return i, err
}

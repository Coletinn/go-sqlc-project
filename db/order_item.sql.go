// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: order_item.sql

package db

import (
	"context"
)

const createOrderItem = `-- name: CreateOrderItem :one
INSERT INTO order_items (order_id, product_id, quantity, unit_price, total_price) 
VALUES ($1, $2, $3, $4, $5) 
RETURNING order_item_id, order_id, product_id, quantity, unit_price, total_price
`

type CreateOrderItemParams struct {
	OrderID    int32
	ProductID  int32
	Quantity   int32
	UnitPrice  float64
	TotalPrice float64
}

func (q *Queries) CreateOrderItem(ctx context.Context, arg CreateOrderItemParams) (OrderItem, error) {
	row := q.db.QueryRowContext(ctx, createOrderItem,
		arg.OrderID,
		arg.ProductID,
		arg.Quantity,
		arg.UnitPrice,
		arg.TotalPrice,
	)
	var i OrderItem
	err := row.Scan(
		&i.OrderItemID,
		&i.OrderID,
		&i.ProductID,
		&i.Quantity,
		&i.UnitPrice,
		&i.TotalPrice,
	)
	return i, err
}

const deleteOrderItem = `-- name: DeleteOrderItem :exec
DELETE FROM order_items WHERE order_item_id = $1
`

func (q *Queries) DeleteOrderItem(ctx context.Context, orderItemID int32) error {
	_, err := q.db.ExecContext(ctx, deleteOrderItem, orderItemID)
	return err
}

const getOrderItemsByOrderID = `-- name: GetOrderItemsByOrderID :many
SELECT oi.order_item_id, oi.order_id, oi.product_id, oi.quantity, oi.unit_price, oi.total_price,
       p.name as product_name, p.sku
FROM order_items oi
JOIN products p ON oi.product_id = p.product_id
WHERE oi.order_id = $1
ORDER BY oi.order_item_id
`

type GetOrderItemsByOrderIDRow struct {
	OrderItemID int32
	OrderID     int32
	ProductID   int32
	Quantity    int32
	UnitPrice   float64
	TotalPrice  float64
	ProductName string
	Sku         string
}

// Order Items queries
func (q *Queries) GetOrderItemsByOrderID(ctx context.Context, orderID int32) ([]GetOrderItemsByOrderIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getOrderItemsByOrderID, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOrderItemsByOrderIDRow
	for rows.Next() {
		var i GetOrderItemsByOrderIDRow
		if err := rows.Scan(
			&i.OrderItemID,
			&i.OrderID,
			&i.ProductID,
			&i.Quantity,
			&i.UnitPrice,
			&i.TotalPrice,
			&i.ProductName,
			&i.Sku,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderItem = `-- name: UpdateOrderItem :one
UPDATE order_items 
SET quantity = $3, unit_price = $4, total_price = $5 
WHERE order_item_id = $1 AND order_id = $2 
RETURNING order_item_id, order_id, product_id, quantity, unit_price, total_price
`

type UpdateOrderItemParams struct {
	OrderItemID int32
	OrderID     int32
	Quantity    int32
	UnitPrice   float64
	TotalPrice  float64
}

func (q *Queries) UpdateOrderItem(ctx context.Context, arg UpdateOrderItemParams) (OrderItem, error) {
	row := q.db.QueryRowContext(ctx, updateOrderItem,
		arg.OrderItemID,
		arg.OrderID,
		arg.Quantity,
		arg.UnitPrice,
		arg.TotalPrice,
	)
	var i OrderItem
	err := row.Scan(
		&i.OrderItemID,
		&i.OrderID,
		&i.ProductID,
		&i.Quantity,
		&i.UnitPrice,
		&i.TotalPrice,
	)
	return i, err
}

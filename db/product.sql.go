// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: product.sql

package db

import (
	"context"
	"database/sql"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (name, description, price, sku, category) 
VALUES ($1, $2, $3, $4, $5) 
RETURNING product_id, name, description, price, sku, category, created_at
`

type CreateProductParams struct {
	Name        string
	Description sql.NullString
	Price       float64
	Sku         string
	Category    sql.NullString
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.Sku,
		arg.Category,
	)
	var i Product
	err := row.Scan(
		&i.ProductID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Sku,
		&i.Category,
		&i.CreatedAt,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products WHERE product_id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, productID int32) error {
	_, err := q.db.ExecContext(ctx, deleteProduct, productID)
	return err
}

const getProductByID = `-- name: GetProductByID :one
SELECT product_id, name, description, price, sku, category, created_at 
FROM products WHERE product_id = $1
`

// Products queries
func (q *Queries) GetProductByID(ctx context.Context, productID int32) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProductByID, productID)
	var i Product
	err := row.Scan(
		&i.ProductID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Sku,
		&i.Category,
		&i.CreatedAt,
	)
	return i, err
}

const getProductBySKU = `-- name: GetProductBySKU :one
SELECT product_id, name, description, price, sku, category, created_at 
FROM products WHERE sku = $1
`

func (q *Queries) GetProductBySKU(ctx context.Context, sku string) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProductBySKU, sku)
	var i Product
	err := row.Scan(
		&i.ProductID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Sku,
		&i.Category,
		&i.CreatedAt,
	)
	return i, err
}

const listProducts = `-- name: ListProducts :many
SELECT product_id, name, description, price, sku, category, created_at 
FROM products 
ORDER BY created_at DESC
`

func (q *Queries) ListProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ProductID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.Sku,
			&i.Category,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductsByCategory = `-- name: ListProductsByCategory :many
SELECT product_id, name, description, price, sku, category, created_at 
FROM products 
WHERE category = $1 
ORDER BY name
`

func (q *Queries) ListProductsByCategory(ctx context.Context, category sql.NullString) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProductsByCategory, category)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ProductID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.Sku,
			&i.Category,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products 
SET name = $2, description = $3, price = $4, category = $5 
WHERE product_id = $1 
RETURNING product_id, name, description, price, sku, category, created_at
`

type UpdateProductParams struct {
	ProductID   int32
	Name        string
	Description sql.NullString
	Price       float64
	Category    sql.NullString
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, updateProduct,
		arg.ProductID,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.Category,
	)
	var i Product
	err := row.Scan(
		&i.ProductID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Sku,
		&i.Category,
		&i.CreatedAt,
	)
	return i, err
}

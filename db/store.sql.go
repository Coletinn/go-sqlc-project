// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: store.sql

package db

import (
	"context"
	"database/sql"
)

const createStore = `-- name: CreateStore :one
INSERT INTO stores (name, address, phone) 
VALUES ($1, $2, $3) 
RETURNING store_id, name, address, phone, created_at
`

type CreateStoreParams struct {
	Name    string
	Address string
	Phone   sql.NullString
}

func (q *Queries) CreateStore(ctx context.Context, arg CreateStoreParams) (Store, error) {
	row := q.db.QueryRowContext(ctx, createStore, arg.Name, arg.Address, arg.Phone)
	var i Store
	err := row.Scan(
		&i.StoreID,
		&i.Name,
		&i.Address,
		&i.Phone,
		&i.CreatedAt,
	)
	return i, err
}

const deleteStore = `-- name: DeleteStore :exec
DELETE FROM stores WHERE store_id = $1
`

func (q *Queries) DeleteStore(ctx context.Context, storeID int32) error {
	_, err := q.db.ExecContext(ctx, deleteStore, storeID)
	return err
}

const getStoreByID = `-- name: GetStoreByID :one
SELECT store_id, name, address, phone, created_at FROM stores WHERE store_id = $1
`

// Stores queries
func (q *Queries) GetStoreByID(ctx context.Context, storeID int32) (Store, error) {
	row := q.db.QueryRowContext(ctx, getStoreByID, storeID)
	var i Store
	err := row.Scan(
		&i.StoreID,
		&i.Name,
		&i.Address,
		&i.Phone,
		&i.CreatedAt,
	)
	return i, err
}

const listStores = `-- name: ListStores :many
SELECT store_id, name, address, phone, created_at FROM stores 
ORDER BY created_at DESC
`

func (q *Queries) ListStores(ctx context.Context) ([]Store, error) {
	rows, err := q.db.QueryContext(ctx, listStores)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Store
	for rows.Next() {
		var i Store
		if err := rows.Scan(
			&i.StoreID,
			&i.Name,
			&i.Address,
			&i.Phone,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStore = `-- name: UpdateStore :one
UPDATE stores 
SET name = $2, address = $3, phone = $4 
WHERE store_id = $1 
RETURNING store_id, name, address, phone, created_at
`

type UpdateStoreParams struct {
	StoreID int32
	Name    string
	Address string
	Phone   sql.NullString
}

func (q *Queries) UpdateStore(ctx context.Context, arg UpdateStoreParams) (Store, error) {
	row := q.db.QueryRowContext(ctx, updateStore,
		arg.StoreID,
		arg.Name,
		arg.Address,
		arg.Phone,
	)
	var i Store
	err := row.Scan(
		&i.StoreID,
		&i.Name,
		&i.Address,
		&i.Phone,
		&i.CreatedAt,
	)
	return i, err
}
